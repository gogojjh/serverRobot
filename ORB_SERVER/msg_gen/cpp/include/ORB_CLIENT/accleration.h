/* Auto-generated by genmsg_cpp for file /home/chiao/documents/clientRobot/ORB_CLIENT/msg/accleration.msg */
#ifndef ORB_CLIENT_MESSAGE_ACCLERATION_H
#define ORB_CLIENT_MESSAGE_ACCLERATION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace ORB_CLIENT
{
template <class ContainerAllocator>
struct accleration_ {
  typedef accleration_<ContainerAllocator> Type;

  accleration_()
  : accx(0.0)
  , accy(0.0)
  , accz(0.0)
  {
  }

  accleration_(const ContainerAllocator& _alloc)
  : accx(0.0)
  , accy(0.0)
  , accz(0.0)
  {
  }

  typedef double _accx_type;
  double accx;

  typedef double _accy_type;
  double accy;

  typedef double _accz_type;
  double accz;


  typedef boost::shared_ptr< ::ORB_CLIENT::accleration_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ORB_CLIENT::accleration_<ContainerAllocator>  const> ConstPtr;
}; // struct accleration
typedef  ::ORB_CLIENT::accleration_<std::allocator<void> > accleration;

typedef boost::shared_ptr< ::ORB_CLIENT::accleration> acclerationPtr;
typedef boost::shared_ptr< ::ORB_CLIENT::accleration const> acclerationConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ORB_CLIENT::accleration_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ORB_CLIENT::accleration_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ORB_CLIENT

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ORB_CLIENT::accleration_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ORB_CLIENT::accleration_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ORB_CLIENT::accleration_<ContainerAllocator> > {
  static const char* value() 
  {
    return "52f638610dadb7657c4decdce8967aeb";
  }

  static const char* value(const  ::ORB_CLIENT::accleration_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x52f638610dadb765ULL;
  static const uint64_t static_value2 = 0x7c4decdce8967aebULL;
};

template<class ContainerAllocator>
struct DataType< ::ORB_CLIENT::accleration_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ORB_CLIENT/accleration";
  }

  static const char* value(const  ::ORB_CLIENT::accleration_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ORB_CLIENT::accleration_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 accx\n\
float64 accy\n\
float64 accz\n\
\n\
";
  }

  static const char* value(const  ::ORB_CLIENT::accleration_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ORB_CLIENT::accleration_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ORB_CLIENT::accleration_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.accx);
    stream.next(m.accy);
    stream.next(m.accz);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct accleration_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ORB_CLIENT::accleration_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ORB_CLIENT::accleration_<ContainerAllocator> & v) 
  {
    s << indent << "accx: ";
    Printer<double>::stream(s, indent + "  ", v.accx);
    s << indent << "accy: ";
    Printer<double>::stream(s, indent + "  ", v.accy);
    s << indent << "accz: ";
    Printer<double>::stream(s, indent + "  ", v.accz);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ORB_CLIENT_MESSAGE_ACCLERATION_H

