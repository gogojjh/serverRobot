/* Auto-generated by genmsg_cpp for file /home/chiao/documents/clientRobot/ORB_CLIENT/msg/keypoint.msg */
#ifndef ORB_CLIENT_MESSAGE_KEYPOINT_H
#define ORB_CLIENT_MESSAGE_KEYPOINT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace ORB_CLIENT
{
template <class ContainerAllocator>
struct keypoint_ {
  typedef keypoint_<ContainerAllocator> Type;

  keypoint_()
  : ptx(0.0)
  , pty(0.0)
  , size(0.0)
  , angle(0.0)
  , response(0.0)
  , octave(0)
  , class_id(0)
  {
  }

  keypoint_(const ContainerAllocator& _alloc)
  : ptx(0.0)
  , pty(0.0)
  , size(0.0)
  , angle(0.0)
  , response(0.0)
  , octave(0)
  , class_id(0)
  {
  }

  typedef float _ptx_type;
  float ptx;

  typedef float _pty_type;
  float pty;

  typedef float _size_type;
  float size;

  typedef float _angle_type;
  float angle;

  typedef float _response_type;
  float response;

  typedef int8_t _octave_type;
  int8_t octave;

  typedef int8_t _class_id_type;
  int8_t class_id;


  typedef boost::shared_ptr< ::ORB_CLIENT::keypoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ORB_CLIENT::keypoint_<ContainerAllocator>  const> ConstPtr;
}; // struct keypoint
typedef  ::ORB_CLIENT::keypoint_<std::allocator<void> > keypoint;

typedef boost::shared_ptr< ::ORB_CLIENT::keypoint> keypointPtr;
typedef boost::shared_ptr< ::ORB_CLIENT::keypoint const> keypointConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ORB_CLIENT::keypoint_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ORB_CLIENT::keypoint_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ORB_CLIENT

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ORB_CLIENT::keypoint_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ORB_CLIENT::keypoint_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ORB_CLIENT::keypoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cd60b68aa4638c0cceb817f0f158a18b";
  }

  static const char* value(const  ::ORB_CLIENT::keypoint_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xcd60b68aa4638c0cULL;
  static const uint64_t static_value2 = 0xceb817f0f158a18bULL;
};

template<class ContainerAllocator>
struct DataType< ::ORB_CLIENT::keypoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ORB_CLIENT/keypoint";
  }

  static const char* value(const  ::ORB_CLIENT::keypoint_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ORB_CLIENT::keypoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 ptx\n\
float32 pty\n\
float32 size\n\
float32 angle\n\
float32 response\n\
int8 octave\n\
int8 class_id\n\
\n\
";
  }

  static const char* value(const  ::ORB_CLIENT::keypoint_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ORB_CLIENT::keypoint_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ORB_CLIENT::keypoint_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ptx);
    stream.next(m.pty);
    stream.next(m.size);
    stream.next(m.angle);
    stream.next(m.response);
    stream.next(m.octave);
    stream.next(m.class_id);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct keypoint_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ORB_CLIENT::keypoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ORB_CLIENT::keypoint_<ContainerAllocator> & v) 
  {
    s << indent << "ptx: ";
    Printer<float>::stream(s, indent + "  ", v.ptx);
    s << indent << "pty: ";
    Printer<float>::stream(s, indent + "  ", v.pty);
    s << indent << "size: ";
    Printer<float>::stream(s, indent + "  ", v.size);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
    s << indent << "response: ";
    Printer<float>::stream(s, indent + "  ", v.response);
    s << indent << "octave: ";
    Printer<int8_t>::stream(s, indent + "  ", v.octave);
    s << indent << "class_id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.class_id);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ORB_CLIENT_MESSAGE_KEYPOINT_H

