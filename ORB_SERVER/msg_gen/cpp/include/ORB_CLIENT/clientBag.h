/* Auto-generated by genmsg_cpp for file /home/chiao/documents/clientRobot/ORB_CLIENT/msg/clientBag.msg */
#ifndef ORB_CLIENT_MESSAGE_CLIENTBAG_H
#define ORB_CLIENT_MESSAGE_CLIENTBAG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ORB_CLIENT/keypoint.h"
#include "sensor_msgs/Image.h"
#include "ORB_CLIENT/gyroscope.h"
#include "ORB_CLIENT/accleration.h"

namespace ORB_CLIENT
{
template <class ContainerAllocator>
struct clientBag_ {
  typedef clientBag_<ContainerAllocator> Type;

  clientBag_()
  : keyPoints()
  , descriptors()
  , nKeypoints(0)
  , nNextId(0)
  , mnId(0)
  , imuTimestamp()
  , gyr()
  , acc()
  , sendTimestamp(0.0)
  {
  }

  clientBag_(const ContainerAllocator& _alloc)
  : keyPoints(_alloc)
  , descriptors(_alloc)
  , nKeypoints(0)
  , nNextId(0)
  , mnId(0)
  , imuTimestamp(_alloc)
  , gyr(_alloc)
  , acc(_alloc)
  , sendTimestamp(0.0)
  {
  }

  typedef std::vector< ::ORB_CLIENT::keypoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ORB_CLIENT::keypoint_<ContainerAllocator> >::other >  _keyPoints_type;
  std::vector< ::ORB_CLIENT::keypoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ORB_CLIENT::keypoint_<ContainerAllocator> >::other >  keyPoints;

  typedef  ::sensor_msgs::Image_<ContainerAllocator>  _descriptors_type;
   ::sensor_msgs::Image_<ContainerAllocator>  descriptors;

  typedef uint32_t _nKeypoints_type;
  uint32_t nKeypoints;

  typedef uint64_t _nNextId_type;
  uint64_t nNextId;

  typedef uint64_t _mnId_type;
  uint64_t mnId;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _imuTimestamp_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  imuTimestamp;

  typedef std::vector< ::ORB_CLIENT::gyroscope_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ORB_CLIENT::gyroscope_<ContainerAllocator> >::other >  _gyr_type;
  std::vector< ::ORB_CLIENT::gyroscope_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ORB_CLIENT::gyroscope_<ContainerAllocator> >::other >  gyr;

  typedef std::vector< ::ORB_CLIENT::accleration_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ORB_CLIENT::accleration_<ContainerAllocator> >::other >  _acc_type;
  std::vector< ::ORB_CLIENT::accleration_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ORB_CLIENT::accleration_<ContainerAllocator> >::other >  acc;

  typedef double _sendTimestamp_type;
  double sendTimestamp;


  typedef boost::shared_ptr< ::ORB_CLIENT::clientBag_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ORB_CLIENT::clientBag_<ContainerAllocator>  const> ConstPtr;
}; // struct clientBag
typedef  ::ORB_CLIENT::clientBag_<std::allocator<void> > clientBag;

typedef boost::shared_ptr< ::ORB_CLIENT::clientBag> clientBagPtr;
typedef boost::shared_ptr< ::ORB_CLIENT::clientBag const> clientBagConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ORB_CLIENT::clientBag_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ORB_CLIENT::clientBag_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ORB_CLIENT

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ORB_CLIENT::clientBag_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ORB_CLIENT::clientBag_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ORB_CLIENT::clientBag_<ContainerAllocator> > {
  static const char* value() 
  {
    return "39e3df274316dfed288a4795b063327b";
  }

  static const char* value(const  ::ORB_CLIENT::clientBag_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x39e3df274316dfedULL;
  static const uint64_t static_value2 = 0x288a4795b063327bULL;
};

template<class ContainerAllocator>
struct DataType< ::ORB_CLIENT::clientBag_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ORB_CLIENT/clientBag";
  }

  static const char* value(const  ::ORB_CLIENT::clientBag_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ORB_CLIENT::clientBag_<ContainerAllocator> > {
  static const char* value() 
  {
    return "keypoint[] keyPoints\n\
sensor_msgs/Image descriptors\n\
\n\
uint32 nKeypoints\n\
uint64 nNextId\n\
uint64 mnId\n\
\n\
float64[] imuTimestamp\n\
gyroscope[] gyr\n\
accleration[] acc \n\
\n\
float64 sendTimestamp\n\
\n\
\n\
================================================================================\n\
MSG: ORB_CLIENT/keypoint\n\
float32 ptx\n\
float32 pty\n\
float32 size\n\
float32 angle\n\
float32 response\n\
int8 octave\n\
int8 class_id\n\
\n\
================================================================================\n\
MSG: sensor_msgs/Image\n\
# This message contains an uncompressed image\n\
# (0, 0) is at top-left corner of image\n\
#\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of cameara\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
                     # If the frame_id here and the frame_id of the CameraInfo\n\
                     # message associated with the image conflict\n\
                     # the behavior is undefined\n\
\n\
uint32 height         # image height, that is, number of rows\n\
uint32 width          # image width, that is, number of columns\n\
\n\
# The legal values for encoding are in file src/image_encodings.cpp\n\
# If you want to standardize a new string format, join\n\
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n\
\n\
string encoding       # Encoding of pixels -- channel meaning, ordering, size\n\
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n\
\n\
uint8 is_bigendian    # is this data bigendian?\n\
uint32 step           # Full row length in bytes\n\
uint8[] data          # actual matrix data, size is (step * rows)\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: ORB_CLIENT/gyroscope\n\
float64 gyrx\n\
float64 gyry\n\
float64 gyrz\n\
\n\
================================================================================\n\
MSG: ORB_CLIENT/accleration\n\
float64 accx\n\
float64 accy\n\
float64 accz\n\
\n\
";
  }

  static const char* value(const  ::ORB_CLIENT::clientBag_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ORB_CLIENT::clientBag_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.keyPoints);
    stream.next(m.descriptors);
    stream.next(m.nKeypoints);
    stream.next(m.nNextId);
    stream.next(m.mnId);
    stream.next(m.imuTimestamp);
    stream.next(m.gyr);
    stream.next(m.acc);
    stream.next(m.sendTimestamp);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct clientBag_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ORB_CLIENT::clientBag_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ORB_CLIENT::clientBag_<ContainerAllocator> & v) 
  {
    s << indent << "keyPoints[]" << std::endl;
    for (size_t i = 0; i < v.keyPoints.size(); ++i)
    {
      s << indent << "  keyPoints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ORB_CLIENT::keypoint_<ContainerAllocator> >::stream(s, indent + "    ", v.keyPoints[i]);
    }
    s << indent << "descriptors: ";
s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.descriptors);
    s << indent << "nKeypoints: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.nKeypoints);
    s << indent << "nNextId: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.nNextId);
    s << indent << "mnId: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.mnId);
    s << indent << "imuTimestamp[]" << std::endl;
    for (size_t i = 0; i < v.imuTimestamp.size(); ++i)
    {
      s << indent << "  imuTimestamp[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.imuTimestamp[i]);
    }
    s << indent << "gyr[]" << std::endl;
    for (size_t i = 0; i < v.gyr.size(); ++i)
    {
      s << indent << "  gyr[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ORB_CLIENT::gyroscope_<ContainerAllocator> >::stream(s, indent + "    ", v.gyr[i]);
    }
    s << indent << "acc[]" << std::endl;
    for (size_t i = 0; i < v.acc.size(); ++i)
    {
      s << indent << "  acc[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ORB_CLIENT::accleration_<ContainerAllocator> >::stream(s, indent + "    ", v.acc[i]);
    }
    s << indent << "sendTimestamp: ";
    Printer<double>::stream(s, indent + "  ", v.sendTimestamp);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ORB_CLIENT_MESSAGE_CLIENTBAG_H

